@page
@model Gameapp.Areas.Admin.Pages.EditPageContentModel
@{
}


<style>
    .dx-htmleditor-content img {
        vertical-align: middle;
        padding-right: 10px;
    }

    .value-content {
        margin-top: 20px;
        overflow: auto;
        height: 110px;
        width: 100%;
        white-space: pre-wrap;
    }

    .options {
        margin-top: 20px;
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
        box-sizing: border-box;
        width: 100%;
    }


    .loader2 {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: url('//upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Phi_fenomeni.gif/50px-Phi_fenomeni.gif') 50% 50% no-repeat rgb(249,249,249);
    }

</style>


@section ExternalDependencies {
<script src="https://unpkg.com/devextreme-quill@21_2/dist/dx-quill.min.js"></script>
<script src="https://unpkg.com/turndown@7.0.0/dist/turndown.js"></script>
<script src="https://unpkg.com/devextreme-showdown/dist/showdown.min.js"></script>
}


<div class="loader2 d-none"></div>


<div class="card">
    <div class="card-header d-flex justify-content-between">
        <h3 style="margin-top:9px; color:#4b49ac"> @sharedResource["Edit"] @sharedResource["Content"]  </h3>
    </div>
    <div style="padding-top:20px;padding-left:20px;padding-right:20px">


        @(Html.DevExtreme().HtmlEditor()
        .ID("html_editor")
        .Height(300)
        .Value(@Model.Content)
        .OnValueChanged("valueChanged")
        .OnContentReady("setMarkupValue")
        .Toolbar(toolbar => toolbar.Items(
        items => {
         items.Add().Name(HtmlEditorToolbarItem.Undo);

            items.Add().Name(HtmlEditorToolbarItem.Redo);

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add()
                .Name("size")
                .AcceptedValues(new[] { "8pt", "10pt", "12pt", "14pt", "18pt", "24pt", "36pt" });

            items.Add()
                .Name("font")
                .AcceptedValues(new[] { "Arial", "Courier New", "Georgia", "Impact", "Lucida Console", "Tahoma", "Times New Roman", "Verdana" });

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add().Name(HtmlEditorToolbarItem.Bold);

            items.Add().Name(HtmlEditorToolbarItem.Italic);

            items.Add().Name(HtmlEditorToolbarItem.Strike);

            items.Add().Name(HtmlEditorToolbarItem.Underline);

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add().Name(HtmlEditorToolbarItem.AlignLeft);

            items.Add().Name(HtmlEditorToolbarItem.AlignCenter);

            items.Add().Name(HtmlEditorToolbarItem.AlignRight);

            items.Add().Name(HtmlEditorToolbarItem.AlignJustify);

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add().Name(HtmlEditorToolbarItem.OrderedList);

            items.Add().Name(HtmlEditorToolbarItem.BulletList);

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add()
                .Name("header")
                .AcceptedValues(new JS("[false, 1, 2, 3, 4, 5]"));

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add().Name(HtmlEditorToolbarItem.Color);

            items.Add().Name(HtmlEditorToolbarItem.Background);

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add().Name(HtmlEditorToolbarItem.Link);

            items.Add().Name(HtmlEditorToolbarItem.Image);

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add().Name(HtmlEditorToolbarItem.Clear);

            items.Add().Name(HtmlEditorToolbarItem.CodeBlock);

            items.Add().Name(HtmlEditorToolbarItem.Blockquote);

            items.Add().Name(HtmlEditorToolbarItem.Separator);

            items.Add().Name(HtmlEditorToolbarItem.InsertTable);

            items.Add().Name(HtmlEditorToolbarItem.DeleteTable);

            items.Add().Name(HtmlEditorToolbarItem.InsertRowAbove);

            items.Add().Name(HtmlEditorToolbarItem.InsertRowBelow);

            items.Add().Name(HtmlEditorToolbarItem.DeleteRow);

            items.Add().Name(HtmlEditorToolbarItem.InsertColumnLeft);

            items.Add().Name(HtmlEditorToolbarItem.InsertColumnRight);

            items.Add().Name(HtmlEditorToolbarItem.DeleteColumn);
        })
        )
        )


        <div style="margin: auto;text-align: center;">
            <a class="btn btn-info"
               id="editButton"
               style="background-color:#4b49ac !important;border:none;width: 16%;margin-top: 20px;"
               onclick="SavePageContent()">@sharedResource["Edit"]</a>

        </div>
    </div>

</div>



@*
    <div class="options">
    @(Html.DevExtreme().ButtonGroup()
    .Items(items => {
    items.Add().Text("Html");
    items.Add().Text("Markdown");
    })
    .OnSelectionChanged("selectionChanged")
    .SelectedItemKeys(new[] { "Html" })
    )
    <div class="value-content"></div>
    </div>*@




<script>
    
    document.getElementById("editButton").addEventListener("click", () => {
        document.getElementsByClassName("loader2")[0].classList.remove("d-none");
    })
    function valueChanged(e) {
        console.log(e.component.option("value"));
@*        $(".value-content").text(e.component.option("value"));
*@        markup = e.component.option("value");
        console.log("marekup", markup);
    }

        function setMarkupValue(e) {
            console.log("ready");
        console.log(e.component.option("value"));
         markup = e.component.option("value");
        console.log("marekup", markup);
    }

    function selectionChanged(e) {
        var editorInstance = $("#html_editor").dxHtmlEditor("instance");
        editorInstance.option("valueType", e.addedItems[0].text.toLowerCase());
        $(".value-content").text(editorInstance.option("value"));
    }

    var markup = ""

    $(".value-content").text(markup);

          function SavePageContent() {

              fetch('https://' + location.host + `/api/mobile/ChangePageContent?key=${@Model.Id}`, {
  method: 'POST', // or 'PUT'
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(`${markup}`),
})
.then(() => {

    location.href = "https://" + location.host + "/Admin/PageContent"
    })




    }

</script>
